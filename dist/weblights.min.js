(function () {
  'use strict';

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
  }

  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray$1(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  if (!Object.entries) {
    Object.entries = function (obj) {
      var ownProps = Object.keys(obj),
          i = ownProps.length,
          resArray = new Array(i); // preallocate the Array

      while (i--) {
        resArray[i] = [ownProps[i], obj[ownProps[i]]];
      }

      return resArray;
    };
  }

  function appendChild(elem, children) {
    if (!children || children === undefined) return;

    if (children instanceof Array) {
      children.map(function (child) {
        return appendChild(elem, child);
      });
      return;
    }

    var child = children;

    if (!(child instanceof Node)) {
      child = document.createTextNode(child.toString());
    }

    elem.appendChild(child);
  }

  function splitCamelCase(str) {
    return str.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
  }

  function createElement(elem, attrs) {
    if (typeof elem.render === "function") {
      return elem.render();
    }

    if (elem instanceof Function) {
      return elem(attrs);
    }

    if (elem instanceof HTMLElement) {
      addAttributes(elem, attrs);
      return elem;
    }

    var element = document.createElement(elem);
    addAttributes(element, attrs);
    return element;
  }
  function render(elem, parent) {
    parent.innerHTML = "";
    parent.appendChild(elem);
  }

  function addAttributes(elem, attrs) {
    if (attrs === null || attrs === undefined) attrs = {};

    for (var _i = 0, _Object$entries = Object.entries(attrs); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          attr = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      if (value === true) elem.setAttribute(attr, attr);else if (attr.startsWith("on") && typeof value === "function") {
        elem.addEventListener(attr.substr(2).toLowerCase(), value);
      } else if (value !== false && value !== null && value !== undefined) {
        var _elem$classList;

        if (value instanceof Object) {
          (function () {
            var modifier = attr === "style" ? splitCamelCase : function (str) {
              return str.toLowerCase();
            };
            value = Object.entries(value).map(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  key = _ref2[0],
                  val = _ref2[1];

              return "".concat(modifier(key), ": ").concat(val);
            }).join("; ");
          })();
        }

        if (attr === "className" && value !== "") (_elem$classList = elem.classList).add.apply(_elem$classList, _toConsumableArray$1(value.toString().trim().split(" ")));else elem.setAttribute(attr, value.toString());
      }
    }
  }

  var createAndAppendSVG = function createAndAppendSVG(tag, attrs) {
    var element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    addAttributes(element, attrs);

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    for (var _i2 = 0, _children = children; _i2 < _children.length; _i2++) {
      var child = _children[_i2];
      var childElement = document.createElementNS('http://www.w3.org/2000/svg', child.nodeName.toLowerCase());

      var _iterator = _createForOfIteratorHelper(child.attributes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var attribute = _step.value;
          childElement.setAttributeNS(null, attribute.nodeName, attribute.nodeValue);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      appendChild(element, childElement);
    }

    return element;
  };

  function converter(tag, attrs) {
    for (var _len2 = arguments.length, children = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      children[_key2 - 2] = arguments[_key2];
    }

    if (tag === "svg") {
      return createAndAppendSVG.apply(void 0, [tag, attrs].concat(children));
    }

    var elem = createElement(tag, attrs);

    for (var _i3 = 0, _children2 = children; _i3 < _children2.length; _i3++) {
      var child = _children2[_i3];
      appendChild(elem, child);
    }

    return elem;
  }

  var module = {
    Fragment: function Fragment() {
      return new DocumentFragment();
    },
    createElement: converter
  };

  var AppElement = document.getElementById("app");

  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
  }
  function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
  function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
  function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
  function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
  function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
  function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
  function _classPrivateFieldInitSpec(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
  function _classPrivateMethodInitSpec(obj, privateSet) {
    _checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }

  function ErrorMessage(_ref) {
    var error = _ref.error;
    return module.createElement("div", null, module.createElement("p", null, "Error: ", module.createElement("code", null, error.toString())), module.createElement("button", {
      type: "button",
      "class": "btn btn-outline-danger",
      onclick: function onclick() {
        return render(SelectSerialPort(), AppElement);
      }
    }, "Restart Weblights"));
  }

  var HostUnitId = 0xfe;
  var PollMessageType = 0x29;
  var _io$1 = /*#__PURE__*/new WeakMap();
  var _nextUnitId = /*#__PURE__*/new WeakMap();
  var _interrupt = /*#__PURE__*/new WeakMap();
  var _pollNextUnit = /*#__PURE__*/new WeakSet();
  var _isValidPollResponse = /*#__PURE__*/new WeakSet();
  var Poller = /*#__PURE__*/function () {
    function Poller(io) {
      _classCallCheck(this, Poller);
      _classPrivateMethodInitSpec(this, _isValidPollResponse);
      _classPrivateMethodInitSpec(this, _pollNextUnit);
      _classPrivateFieldInitSpec(this, _io$1, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldInitSpec(this, _nextUnitId, {
        writable: true,
        value: 0
      });
      _classPrivateFieldInitSpec(this, _interrupt, {
        writable: true,
        value: false
      });
      _classPrivateFieldSet(this, _io$1, io);
    }
    _createClass(Poller, [{
      key: "start",
      value: function start(cb) {
        _classPrivateFieldSet(this, _nextUnitId, 0);
        _classPrivateMethodGet(this, _pollNextUnit, _pollNextUnit2).call(this, cb);
      }
    }, {
      key: "interrupt",
      value: function interrupt() {
        _classPrivateFieldSet(this, _interrupt, true);
      }
    }]);
    return Poller;
  }();
  function _pollNextUnit2(_x) {
    return _pollNextUnit3.apply(this, arguments);
  }
  function _pollNextUnit3() {
    _pollNextUnit3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cb) {
      var _this = this;
      var _this$nextUnitId;
      var messages;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            console.log("polling:", _classPrivateFieldGet(this, _nextUnitId));
            _context.next = 3;
            return _classPrivateFieldGet(this, _io$1).write([_classPrivateFieldGet(this, _nextUnitId), 136, PollMessageType, 0x2d]);
          case 3:
            _context.next = 5;
            return _classPrivateFieldGet(this, _io$1).read();
          case 5:
            messages = _context.sent;
            messages.forEach(function (message) {
              if (_classPrivateMethodGet(_this, _isValidPollResponse, _isValidPollResponse2).call(_this, message)) {
                cb({
                  unitId: _classPrivateFieldGet(_this, _nextUnitId),
                  unitType: message[2]
                });
              }
            });
            _classPrivateFieldSet(this, _nextUnitId, (_this$nextUnitId = _classPrivateFieldGet(this, _nextUnitId), _this$nextUnitId++, _this$nextUnitId));
            if (_classPrivateFieldGet(this, _nextUnitId) < HostUnitId && _classPrivateFieldGet(this, _io$1).isConnected() && !_classPrivateFieldGet(this, _interrupt)) {
              _classPrivateMethodGet(this, _pollNextUnit, _pollNextUnit2).call(this, cb);
            }
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    return _pollNextUnit3.apply(this, arguments);
  }
  function _isValidPollResponse2(message) {
    var hostIndex = message.indexOf(HostUnitId);
    if (hostIndex === -1 || hostIndex + 1 >= message.length) {
      return false;
    } else {
      return message[hostIndex + 1] == PollMessageType;
    }
  }

  function readInterruptSignal(timeoutMillis) {
    return new Promise(function (_, reject) {
      setTimeout(function () {
        return reject(new Error("read timeout"));
      }, timeoutMillis);
    });
  }
  function groupMessages(msg) {
    var groups = [];
    var currentGroupStart = false;
    for (var i = 0; i < msg.length; i++) {
      if (msg[i] !== 0) {
        // start of group
        if (currentGroupStart === false) {
          currentGroupStart = i;
        }
      } else {
        // end of group
        if (currentGroupStart !== false) {
          groups.push(msg.slice(currentGroupStart, i));
          currentGroupStart = false;
        }
      }
    }

    // dangling group
    if (currentGroupStart !== false) {
      groups.push(msg.slice(currentGroupStart, msg.length));
    }
    return groups;
  }
  var _serialPort = /*#__PURE__*/new WeakMap();
  var _readInterrupt = /*#__PURE__*/new WeakMap();
  var _setRequestToSend = /*#__PURE__*/new WeakSet();
  var LorIO = /*#__PURE__*/function () {
    function LorIO(serialPort) {
      _classCallCheck(this, LorIO);
      _classPrivateMethodInitSpec(this, _setRequestToSend);
      _classPrivateFieldInitSpec(this, _serialPort, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldInitSpec(this, _readInterrupt, {
        writable: true,
        value: false
      });
      _classPrivateFieldSet(this, _serialPort, serialPort);
    }
    _createClass(LorIO, [{
      key: "read",
      value: function () {
        var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var timeoutMillis,
            sum,
            readTryCount,
            reader,
            _yield$Promise$race,
            value,
            done,
            newSum,
            _args = arguments;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                timeoutMillis = _args.length > 0 && _args[0] !== undefined ? _args[0] : 2500;
                sum = new Uint8Array([]); // messages may be broken into several read calls,
                // and without full protocol documentation we don't know
                // when a fully valid response is received
                // this helps ensures the inbound buffer is fully read
                // each read try is given a 500ms allowance
                readTryCount = Math.max(timeoutMillis / 500);
              case 3:
                if (!(_classPrivateFieldGet(this, _serialPort).readable && readTryCount > 0 && !_classPrivateFieldGet(this, _readInterrupt))) {
                  _context.next = 27;
                  break;
                }
                readTryCount--;
                reader = _classPrivateFieldGet(this, _serialPort).readable.getReader();
                _context.prev = 6;
                _context.next = 9;
                return Promise.race([reader.read(), readInterruptSignal(500) // read in 500ms blocks, up to the full `timeoutMillis` value
                ]);
              case 9:
                _yield$Promise$race = _context.sent;
                value = _yield$Promise$race.value;
                done = _yield$Promise$race.done;
                if (!done) {
                  _context.next = 16;
                  break;
                }
                return _context.abrupt("break", 27);
              case 16:
                if (value && value.length > 0) {
                  newSum = new Uint8Array(sum.length + value.length);
                  newSum.set(sum);
                  newSum.set(value, sum.length);
                  sum = newSum;
                }
              case 17:
                _context.next = 22;
                break;
              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](6);
                // ignore errors directly generated by interrupt signal
                if (_context.t0.message !== "read timeout") {
                  console.error(_context.t0);
                }
              case 22:
                _context.prev = 22;
                reader.releaseLock();
                return _context.finish(22);
              case 25:
                _context.next = 3;
                break;
              case 27:
                if (!_classPrivateFieldGet(this, _readInterrupt)) {
                  _context.next = 29;
                  break;
                }
                throw new Error("read interrupt");
              case 29:
                return _context.abrupt("return", groupMessages(sum));
              case 30:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[6, 19, 22, 25]]);
        }));
        function read() {
          return _read.apply(this, arguments);
        }
        return read;
      }()
    }, {
      key: "write",
      value: function () {
        var _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(msg) {
          var writer, data;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (!_classPrivateFieldGet(this, _serialPort).writable) {
                  _context2.next = 13;
                  break;
                }
                writer = _classPrivateFieldGet(this, _serialPort).writable.getWriter();
                _context2.prev = 2;
                data = new Uint8Array([0x00].concat(_toConsumableArray(msg), [0x00]));
                _context2.next = 6;
                return _classPrivateMethodGet(this, _setRequestToSend, _setRequestToSend2).call(this, true);
              case 6:
                _context2.next = 8;
                return writer.write(data);
              case 8:
                _context2.prev = 8;
                writer.releaseLock();
                _context2.next = 12;
                return _classPrivateMethodGet(this, _setRequestToSend, _setRequestToSend2).call(this, false);
              case 12:
                return _context2.finish(8);
              case 13:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this, [[2,, 8, 13]]);
        }));
        function write(_x) {
          return _write.apply(this, arguments);
        }
        return write;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var _classPrivateFieldGet2, _classPrivateFieldGet3;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _classPrivateFieldSet(this, _readInterrupt, true);
                _context3.prev = 1;
                _context3.next = 4;
                return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _serialPort)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.close();
              case 4:
                _context3.next = 6;
                return (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _serialPort)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.forget();
              case 6:
                _context3.next = 11;
                break;
              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3["catch"](1);
                console.error("ignoring error while closing serialPort:", _context3.t0);
              case 11:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this, [[1, 8]]);
        }));
        function close() {
          return _close.apply(this, arguments);
        }
        return close;
      }()
    }, {
      key: "isConnected",
      value: function isConnected() {
        if (!_classPrivateFieldGet(this, _serialPort)) {
          return false;
        }
        return _classPrivateFieldGet(this, _serialPort).readable && _classPrivateFieldGet(this, _serialPort).writable;
      }
    }]);
    return LorIO;
  }();
  function _setRequestToSend2(_x2) {
    return _setRequestToSend3.apply(this, arguments);
  }
  function _setRequestToSend3() {
    _setRequestToSend3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(b) {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _classPrivateFieldGet(this, _serialPort).setSignals({
              requestToSend: b
            });
          case 2:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    return _setRequestToSend3.apply(this, arguments);
  }

  var _io = /*#__PURE__*/new WeakMap();
  var Heartbeat = /*#__PURE__*/function () {
    function Heartbeat(io) {
      _classCallCheck(this, Heartbeat);
      _classPrivateFieldInitSpec(this, _io, {
        writable: true,
        value: void 0
      });
      _classPrivateFieldSet(this, _io, io);
    }
    _createClass(Heartbeat, [{
      key: "start",
      value: function start() {
        var _this = this;
        var intervalTask = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (_classPrivateFieldGet(_this, _io).isConnected()) {
                  _context.next = 5;
                  break;
                }
                console.log("stopping heartbeat loop");
                clearInterval(intervalTask);
                _context.next = 7;
                break;
              case 5:
                _context.next = 7;
                return _classPrivateFieldGet(_this, _io).write([0xff, 0x81, 0x56]);
              case 7:
              case "end":
                return _context.stop();
            }
          }, _callee);
        })), 500);
      }
    }]);
    return Heartbeat;
  }();

  function CompatibleBrowserTest() {
    if ("serial" in navigator) {
      return SelectSerialPort();
    } else {
      return module.createElement("p", null, "Your browser doesn't support the JavaScript requirements for communicating with serial port hardware. Please ensure you are using a compatible browser and try again.");
    }
  }
  function SelectSerialPort() {
    function handleDisconnectedSerialPort() {
      render(DisconnectedSerialPort(), AppElement);
    }
    function openSerialPort() {
      return _openSerialPort.apply(this, arguments);
    }
    function _openSerialPort() {
      _openSerialPort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var serialPort;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return navigator.serial.requestPort({
                filters: [{
                  usbVendorId: 1027
                }] // TODO: allow config
              });
            case 3:
              serialPort = _context.sent;
              serialPort.ondisconnect = handleDisconnectedSerialPort;

              // options: https://wicg.github.io/serial/#serialoptions-dictionary
              // identified from testing with LOR hardware
              // FIXME: open should fire #onconnect, but doesn't seem to with LOR hardware
              _context.next = 7;
              return serialPort.open({
                baudRate: 19200,
                // TODO: allow config
                parity: "none",
                dataBits: 8,
                stopBits: 1
              });
            case 7:
              render(module.createElement(TestConnection, {
                serialPort: serialPort
              }), AppElement);
              _context.next = 14;
              break;
            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              console.error("error opening serialport:", _context.t0);
              if (_context.t0.name === "NotFoundError") ; else {
                render(module.createElement(ErrorMessage, {
                  error: _context.t0
                }), AppElement);
              }
            case 14:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 10]]);
      }));
      return _openSerialPort.apply(this, arguments);
    }
    return module.createElement("div", null, module.createElement("p", null, "Your browser may prompt you with a permission dialog to enable connecting to a serial port. This step is required for allowing Weblights to communicate with the Light-O-Rama hardware connected to your computer via your browser."), module.createElement("button", {
      type: "button",
      "class": "btn btn-primary",
      onclick: openSerialPort
    }, "Select Light-O-Rama Serial Port"));
  }
  function DisconnectedSerialPort() {
    return module.createElement("div", null, module.createElement("p", null, "Connection lost or disconnected by user."), module.createElement("button", {
      type: "button",
      "class": "btn btn-primary",
      onclick: function onclick() {
        return render(SelectSerialPort(), AppElement);
      }
    }, "Select New Serial Port"));
  }
  function TestConnection(_ref) {
    var serialPort = _ref.serialPort;
    var io = new LorIO(serialPort);
    var heartbeat = new Heartbeat(io);
    heartbeat.start();
    var poller = new Poller(io);
    var connectedUnits = [];
    var subview = function subview() {
      return module.createElement(ActiveConnection, {
        io: io,
        connectedUnits: connectedUnits
      });
    };
    poller.start(function (newUnit) {
      connectedUnits.push(newUnit);
      render(subview(), AppElement);
    });
    return subview();
  }
  function ActiveConnection(_ref2) {
    var io = _ref2.io,
      connectedUnits = _ref2.connectedUnits;
    function closeSerialPort() {
      return _closeSerialPort.apply(this, arguments);
    }
    function _closeSerialPort() {
      _closeSerialPort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return io.close();
            case 3:
              _context2.next = 8;
              break;
            case 5:
              _context2.prev = 5;
              _context2.t0 = _context2["catch"](0);
              console.error("error while closing connection:", _context2.t0);
            case 8:
              _context2.prev = 8;
              render(SelectSerialPort(), AppElement);
              return _context2.finish(8);
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 5, 8, 11]]);
      }));
      return _closeSerialPort.apply(this, arguments);
    }
    return module.createElement("div", null, module.createElement("p", null, "Serial port connected."), module.createElement("ul", null, connectedUnits.map(function (unit) {
      return module.createElement("li", null, JSON.stringify(unit));
    })), module.createElement("button", {
      type: "button",
      "class": "btn btn-outline-danger",
      onclick: closeSerialPort
    }, "Disconnect"));
  }

  render(module.createElement(CompatibleBrowserTest, null), AppElement);

})();
